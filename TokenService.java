package vn.mbf.cbs.auth.service;

import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.TimeZone;

import javax.servlet.http.HttpServletRequest;

import org.modelmapper.ModelMapper;
import org.springframework.http.HttpHeaders;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.RequestMethod;

import com.hazelcast.core.HazelcastInstance;
import com.hazelcast.map.IMap;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jws;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import vn.mbf.cbs.auth.common.Const;
import vn.mbf.cbs.auth.dto.CbsUserDto;
import vn.mbf.cbs.auth.dto.ValidateTokenResponseDto;
import vn.mbf.cbs.auth.entity.AmUser;
import vn.mbf.cbs.auth.properties.TokenProperties;
import vn.mbf.cbs.auth.repository.AmUserRepository;

/**
 * @author MBF
 * @version 1.0
 * @since 1.0
 */
@Service
@AllArgsConstructor
@Slf4j
public class TokenService {
	
    private AmUserRepository amUserRepository;
    private ModelMapper modelMapper;
    
    private HazelcastInstance hazelcastInstance;
    
    private TokenProperties tokenProperties;
    
    private CacheService cacheService;
    
    private static final SignatureAlgorithm signatureAlgorithm = SignatureAlgorithm.HS256;

    /**
     * generate token for customer
     *
     * @param customerDto
     * @return
     */
    public String generateToken(AmUser amUser, Integer expireDate) {
        
    	// calculate expires time
    	LocalDateTime currentTime;
    	
    	if (expireDate == null) {
    		currentTime = LocalDateTime.now();
	        currentTime = currentTime.plus(tokenProperties.getExpires(), ChronoUnit.MINUTES);
    	} else {
    		currentTime = LocalDateTime.ofInstant(Instant.ofEpochMilli(expireDate * 1000L), 
                    TimeZone.getDefault().toZoneId());  
    	}
        
        // initial claims
        Map<String, Object> claims = new HashMap<>();
        claims.put("sub", ClaimSubject.USER);
        claims.put("id", amUser.getUserId());
        claims.put("name", amUser.getUserName());

        return Jwts.builder()
                .setClaims(claims)
                .setExpiration(
                        Date.from(currentTime.atZone(ZoneId.systemDefault()).toInstant())
                )
                .signWith(Keys.hmacShaKeyFor(tokenProperties.getSecretKey().getBytes()), signatureAlgorithm)
                .compact();
    }
    
    /**
     * Get token from HttpRequest
     * @param request
     * @return
     */
    public String getToken(HttpServletRequest request) {
    	
    	// Get authorization header and validate
        String header = request.getHeader(HttpHeaders.AUTHORIZATION);

        // Get jwt token and validate
        String token = header.split(" ")[1].trim();
        
        return token;
    }
    
    /**
     * Validate token from HttpServletRequest
     * @param request
     * @return
     */
    public ValidateTokenResponseDto validate(HttpServletRequest request) {
    	
    	String token = getToken(request);
        
        return validate(token, null, null);
    }

    /**
     * validate token generated by system.
     *
     * @param jws
     * @return
     */
    public ValidateTokenResponseDto validate(String accessToken, String requestUrl, String methodName) {
    	
        ValidateTokenResponseDto validateTokenResponseDto = ValidateTokenResponseDto.builder()
                .success(false).build();
        
        IMap<String, String> mLogout = hazelcastInstance.getMap(Const.DFT.LOGOUT);
		
        // da logout truoc do
        if (mLogout.containsKey(accessToken)) {
        	return validateTokenResponseDto;
        }
        
        try {
            Jws<Claims> claimsJws = Jwts.parserBuilder()
            		.setSigningKey(Keys.hmacShaKeyFor(tokenProperties.getSecretKey().getBytes()))
                    .build()
                    .parseClaimsJws(accessToken);
            
            // parser claims
            Claims claims = claimsJws.getBody();
            
            String subject = (String) claims.get("sub");
            ClaimSubject claimSubject = ClaimSubject.valueOf(subject);
            
            // TODO: validate uri

            if (claimSubject == ClaimSubject.USER) {
                long amUserId = ((Number) claims.get("id")).longValue();

                Optional<AmUser> amUserOptional = amUserRepository.findById(amUserId);
                
                // exists user
                if (amUserOptional.isPresent()) {
                	
                	AmUser amUser = amUserOptional.get();
                	
                	// co requestUrl
                	if (requestUrl != null) {
                		
                		// kiem tra authorization cache (requestUrl?)
                		RequestMethod requestMethod = "filters".equalsIgnoreCase(requestUrl) ? RequestMethod.GET : RequestMethod.valueOf(methodName);
                		
                		// Khong co quyen duoc luu trong cache
                		if (!cacheService.hasPermission(amUser.getUserId(), requestUrl, requestMethod)) {
                			
                			return validateTokenResponseDto;
                		}
                	}
                	
                    validateTokenResponseDto = ValidateTokenResponseDto.builder()
                            .success(true)
                            .info(modelMapper.map(amUserOptional.get(), CbsUserDto.class))
                            .build();
                }
            }
        } catch (Exception e) {
            log.warn("can't parse jwt token: {}", accessToken, e);
        }

        return validateTokenResponseDto;
    }

    /**
     * Define claim subject type
     */
    public enum ClaimSubject {
        USER,
        ADMIN;
    }
}
